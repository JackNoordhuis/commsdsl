#include "cxxtest/TestSuite.h"

#include "test43/Message.h"
#include "test43/frame/Frame.h"
#include "test43/dispatch/DispatchMessage.h"
#include "comms/process.h"
#include "comms/iterator.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    class Handler;

    using Interface =
        test43::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::Handler<Handler>
        >;

    using Msg1 = test43::message::Msg1<Interface>;
    using Msg2 = test43::message::Msg2<Interface>;
    using Frame = test43::frame::Frame<Interface>;

    class Handler
    {
    public:
        void handle(Msg1& msg)
        {
            static_cast<void>(msg);
            ++m_msg1Received;
        }

        void handle(Msg2& msg)
        {
            static_cast<void>(msg);
            ++m_msg2Received;
        }        

        void handle(Interface& msg)
        {
            static_cast<void>(msg);
            ++m_unrecognizedReceived;
        }

        unsigned m_msg1Received = 0;
        unsigned m_msg2Received = 0;
        unsigned m_unrecognizedReceived = 0;
    };
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x0, 0x5, // length
        0x1, // id
        0x1, // list count
        0x0, // key
        0xab, 0xcd // value
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame frame;
    Handler handler;
    auto readIter = &Buf[0];
    comms::processAllWithDispatch(readIter, BufSize, frame, handler);

    TS_ASSERT_EQUALS(handler.m_msg1Received, 1U);
    TS_ASSERT_EQUALS(handler.m_msg2Received, 0U);
    TS_ASSERT_EQUALS(handler.m_unrecognizedReceived, 0U); 
}

void TestSuite::test2()
{
    static const std::uint8_t Buf[] = {
        0x0, 0x4, // length
        0x2, // id
        0x0, // key
        0xab, 0xcd // value
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame frame;
    Handler handler;
    auto readIter = &Buf[0];
    comms::processAllWithDispatch(readIter, BufSize, frame, handler);

    TS_ASSERT_EQUALS(handler.m_msg1Received, 0U);
    TS_ASSERT_EQUALS(handler.m_msg2Received, 1U);
    TS_ASSERT_EQUALS(handler.m_unrecognizedReceived, 0U); 
}
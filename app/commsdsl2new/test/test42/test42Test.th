#include "cxxtest/TestSuite.h"

#include "test42/Message.h"
#include "test42/frame/Frame.h"
#include "test42/dispatch/DispatchMessage.h"
#include "comms/process.h"
#include "comms/iterator.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    class Handler;

    using Interface =
        test42::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::Handler<Handler>
        >;

    using Msg1 = test42::message::Msg1<Interface>;
    using Msg2 = test42::message::Msg2<Interface>;
    using Frame = test42::frame::Frame<Interface>;

    class Handler
    {
    public:
        void handle(Msg1& msg)
        {
            static_cast<void>(msg);
            ++m_msg1Received;
        }

        void handle(Msg2& msg)
        {
            static_cast<void>(msg);
            ++m_msg2Received;
        }        

        void handle(Interface& msg)
        {
            static_cast<void>(msg);
            ++m_unrecognizedReceived;
        }

        unsigned m_msg1Received = 0;
        unsigned m_msg2Received = 0;
        unsigned m_unrecognizedReceived = 0;
    };
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        68, 0xab, 0xcd, // Unexpected, should be skipped
        27, 0xaa, // Msg1
        38, 0xbb, 0xbb // Msg2
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame frame;
    Handler handler;
    auto readIter = &Buf[0];
    comms::processAllWithDispatch(readIter, BufSize, frame, handler);

    TS_ASSERT_EQUALS(handler.m_msg1Received, 1U);
    TS_ASSERT_EQUALS(handler.m_msg2Received, 1U);
    TS_ASSERT_EQUALS(handler.m_unrecognizedReceived, 0U); 
}

void TestSuite::test2()
{
    Msg1 msg1;
    msg1.field_f1().value() = 0xab;
    
    Frame frame;

    std::vector<std::uint8_t> output;
    output.resize(frame.length(msg1));
    auto writeIter = comms::writeIteratorFor(msg1, &output[0]);
    auto es = frame.write(static_cast<Interface&>(msg1), writeIter, output.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    static const std::uint8_t ExpectedBuf[] = {
        27, 0xab
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;

    TS_ASSERT_EQUALS(ExpectedBufSize, output.size());
    TS_ASSERT(std::equal(output.begin(), output.end(), std::begin(ExpectedBuf)));
}
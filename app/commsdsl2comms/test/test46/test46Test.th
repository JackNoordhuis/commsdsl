#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test46/Interface.h"
#include "test46/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test46::Interface<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Frame = test46::frame::Frame<Interface>;
    using ChecksumType = Interface::TransportField_checksumType::ValueType;

    TEST46_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
};

void TestSuite::test1()
{
    Frame frame;

    Msg1 msg;
    msg.transportField_checksumType().value() = ChecksumType::Sum8;
    msg.field_f1().value() = 0x0123;

    std::vector<std::uint8_t> buf;
    buf.resize(frame.length(msg));

    auto outIter = &buf[0];
    auto es = frame.write(msg, outIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    

    const auto* readIter = &buf[0];
    Frame::MsgPtr msgPtr;
    es = frame.read(msgPtr, readIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
}

void TestSuite::test2()
{
    Frame frame;

    Msg2 msg;
    msg.transportField_checksumType().value() = ChecksumType::Crc16;
    msg.field_f1().value() = 0x01234567;

    std::vector<std::uint8_t> buf;
    buf.resize(frame.length(msg));

    auto outIter = &buf[0];
    auto es = frame.write(msg, outIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    

    const auto* readIter = &buf[0];
    Frame::MsgPtr msgPtr;
    es = frame.read(msgPtr, readIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
}

void TestSuite::test3()
{
    Frame frame;

    Msg3 msg;
    msg.transportField_checksumType().value() = ChecksumType::Crc32;
    msg.field_f1().value() = "hello";

    std::vector<std::uint8_t> buf;
    buf.resize(frame.length(msg));

    auto outIter = &buf[0];
    auto es = frame.write(msg, outIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    

    const auto* readIter = &buf[0];
    Frame::MsgPtr msgPtr;
    es = frame.read(msgPtr, readIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
}

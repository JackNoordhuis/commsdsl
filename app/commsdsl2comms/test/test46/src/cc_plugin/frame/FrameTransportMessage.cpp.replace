#include "FrameTransportMessage.h"

#include "comms_champion/property/field.h"
#include "cc_plugin/field/ChecksumType.h"
#include "cc_plugin/field/MsgId.h"

namespace cc = comms_champion;

namespace test46
{

namespace cc_plugin
{

namespace frame
{

namespace
{

struct ChecksumLayer
{
    static QVariantMap createProps_checksumField()
    {
        using Field = test46::frame::FrameLayers<>::ChecksumMembers::ChecksumField;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .asMap();
        
    }
    
};

struct SyncLayer
{
    static QVariantMap createProps_syncField()
    {
        using Field = test46::frame::FrameLayers<>::SyncMembers::SyncField;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .asMap();
        
    }
    
};

struct SizeLayer
{
    static QVariantMap createProps_sizeField()
    {
        using Field = test46::frame::FrameLayers<>::SizeMembers::SizeField;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .asMap();
        
    }
    
};

struct IdLayer
{
    static QVariantMap createProps_msgId()
    {
        return cc_plugin::field::createProps_msgId("MsgId");
    }
    
};

struct ChekcusmTypeLayer
{
    static QVariantMap createProps_checksumType()
    {
        return cc_plugin::field::createProps_checksumType("ChecksumType");
    }
    
};

struct DataLayer
{
    static QVariantMap createProps_data()
    {
        return cc::property::field::ArrayList().name("Data").asMap();
    }
    
};


QVariantList createProps()
{
     QVariantList props;
     props.append(SyncLayer::createProps_syncField());
     props.append(SizeLayer::createProps_sizeField());
     props.append(IdLayer::createProps_msgId());
     props.append(ChekcusmTypeLayer::createProps_checksumType());
     props.append(DataLayer::createProps_data());
     props.append(ChecksumLayer::createProps_checksumField());
     return props;
}

} // namespace

const QVariantList& FrameTransportMessage::fieldsPropertiesImpl() const
{
    static const QVariantList Props = createProps();
    return Props;
}

comms::ErrorStatus FrameTransportMessage::readImpl(ReadIterator& iter, std::size_t len)
{
    // Read until payload
    auto es = doReadUntilAndUpdateLen<4U>(iter, len);
    if (es != comms::ErrorStatus::Success) {
        return es;
    }

    auto& checksumTypeField = std::get<3>(fields());
    auto checksumType = checksumTypeField.value();
    using ChecksumType = typename std::decay<decltype(checksumType)>::type;

    auto& checksumField = std::get<5>(fields());
    auto checksumLen = checksumField.minLength();
    do {
        if (checksumType == ChecksumType::Sum8) {
            checksumLen = sizeof(std::uint8_t);
            break;
        }

        if (checksumType == ChecksumType::Crc16) {
            checksumLen = sizeof(std::uint16_t);
            break;
        }        
    } while (false);

    len -= checksumLen;

    es = doReadFromUntilAndUpdateLen<4U, 5U>(iter, len);
    if (es != comms::ErrorStatus::Success) {
        return es;
    }

    using ChecksumFieldType = typename std::decay<decltype(checksumField)>::type;
    using FieldBase = ChecksumFieldType::FieldBase;

    if (checksumType == ChecksumType::Sum8) {
        using FieldTmp = comms::field::IntValue<FieldBase, std::uint8_t>;
        FieldTmp fieldTmp;
        es = fieldTmp.read(iter, checksumLen);
        checksumField.value() = static_cast<ChecksumFieldType::ValueType>(fieldTmp.value());
        return es;
    }

    if (checksumType == ChecksumType::Crc16) {
        using FieldTmp = comms::field::IntValue<FieldBase, std::uint16_t>;
        FieldTmp fieldTmp;
        es = fieldTmp.read(iter, checksumLen);
        checksumField.value() = static_cast<ChecksumFieldType::ValueType>(fieldTmp.value());
        return es;
    }    

    len += checksumLen;
    return doReadFrom<5U>(iter, len);    
}

} // namespace frame

} // namespace cc_plugin

} // namespace test46


